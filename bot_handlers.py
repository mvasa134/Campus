from telebot import types
from datetime import datetime
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from attendance import start_attendance_check, im_save_attendance_to_csv
from scheduler import save_schedule_to_csv, load_schedule_from_csv
from user_management import is_user_in_whitelist, is_user_admin, approve_user, add_user_to_whitelist, get_all_admins, is_user_blacklisted,toggle_notification, get_user_notifications, get_blacklist, remove_from_blacklist
from invites import add_invite_button_for_admin, get_available_folders, get_invites_by_folder
from utils import broadcast_message
from config import INVITE_COLUMNS, BACK_BUTTON_TEXT, ATTENDANCE_FILE, DAYS_MAP
from time1 import get_current_time_data


attendance_data = {}
user_data = {}
is_adding_id = {}
admin_schedule = {}
pending_requests = {}
def register_handlers(bot):
    @bot.message_handler(commands=['start'])
    def start_menu(message):
        user_id = message.from_user.id

        # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –≤ –±—ñ–ª–æ–º—É —Å–ø–∏—Å–∫—É
        if not is_user_in_whitelist(user_id):
            request_access(user_id, message)
            return
        if user_id == is_user_blacklisted(user_id):
            bot.send_message(user_id,'–í–∏ –≤ —á–æ—Ä–Ω–æ–º—É —Å–ø–∏—Å–∫—É')
        # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
        keyboard = types.InlineKeyboardMarkup(row_width=2)

        # –ö–Ω–æ–ø–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ –¥–ª—è –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        attendance_button = types.InlineKeyboardButton(text="–í—ñ–¥–º—ñ—Ç–∏—Ç–∏—Å—å –Ω–∞ –ø–∞—Ä—ñüìç", callback_data="attendance")
        invites_button = types.InlineKeyboardButton(text="–ó–∞–ø–∏—Å–∏/–∫–æ–Ω—Å–ø–µ–∫—Ç‚ùó", callback_data="invites")
        schedule_button = types.InlineKeyboardButton(text="–†–æ–∑–∫–ª–∞–¥üìö", callback_data="view_schedule")
        form_button = types.InlineKeyboardButton(text="–í—ñ–¥—Ä–∞—Ö—É–≤–∞–Ω–Ω—èüóø", callback_data='vidrh')
        settings_button = types.InlineKeyboardButton(text='–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è‚öôÔ∏è', callback_data='settings')

        # –î–æ–¥–∞—î–º–æ –∑–∞–≥–∞–ª—å–Ω—ñ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        keyboard.add(attendance_button, invites_button)
        keyboard.add(schedule_button, form_button)

        # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –¥–æ–¥–∞—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –∫–Ω–æ–ø–∫–∏
        if is_user_admin(str(user_id)):
            broadcast_button = types.InlineKeyboardButton(text='–†–æ–∑—Å–∏–ª–∫–∞üì™', callback_data="broadcast")
            add_invite_button = types.InlineKeyboardButton(text="–î–æ–¥–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è", callback_data="addinvite")
            blacklist_button = types.InlineKeyboardButton(text="–ß–æ—Ä–Ω–∏–π —Å–ø–∏—Å–æ–∫üïØ", callback_data="blacklist")

            # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            keyboard.add(blacklist_button, add_invite_button)
            keyboard.add(broadcast_button, settings_button)
        else:
            # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä, –¥–æ–¥–∞—î–º–æ –ª–∏—à–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
            keyboard.add(settings_button)

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –º–µ–Ω—é
        bot.send_message(
            user_id,
            "–ü—Ä–∏–≤—ñ—Ç! –Ø ‚Äì –±–æ—Ç –Ü–ö-44, —Å—Ç–≤–æ—Ä–µ–Ω–∏–π —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤, —â–æ–± –ø–æ–ª–µ–≥—à–∏—Ç–∏ –≤–∞—à–µ –Ω–∞–≤—á–∞–Ω–Ω—è —Ç–∞ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—é –≥—Ä—É–ø–æ–≤–∏—Ö —Å–ø—Ä–∞–≤!üòâ",
            reply_markup=keyboard
        )

        # --- –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø–∏—Ç—É –¥–æ—Å—Ç—É–ø—É ---

    def request_access(user_id, message):
        keyboard = types.InlineKeyboardMarkup()

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Å—Ö–≤–∞–ª–µ–Ω–Ω—è —Ç–∞ —ñ–≥–Ω–æ—Ä—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É
        approve_button = types.InlineKeyboardButton(
            text="–°—Ö–≤–∞–ª–∏—Ç–∏‚úÖ", callback_data=f"approve_{user_id}_{message.from_user.username}"
        )
        ignore_button = types.InlineKeyboardButton(
            text="–Ü–≥–Ω–æ—Ä—É–≤–∞—Ç–∏‚ùå", callback_data=f"ignore_{user_id}_{message.from_user.username}"
        )

        keyboard.add(approve_button, ignore_button)

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –≤—Å—ñ—Ö –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤
        pending_requests[user_id] = []

        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—Å—ñ–º –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        admin_id=407976503

        msg = bot.send_message(
            admin_id,
            f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.username} {message.from_user.first_name} (ID: {user_id}) –∑–∞–ø–∏—Ç—É—î –¥–æ—Å—Ç—É–ø.",
            reply_markup=keyboard
            )
        pending_requests[user_id].append((admin_id, msg.message_id))

        # –Ü–Ω—Ñ–æ—Ä–º—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—Ä–æ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø—É
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É! –û—á—ñ–∫—É–π—Ç–µ —Å—Ö–≤–∞–ª–µ–Ω–Ω—è!")

    @bot.callback_query_handler(func=lambda call: call.data.startswith('approve_'))
    def whitelist_user(call):
        parts = call.data.split('_')
        user_id, username = parts[1], "_".join(parts[2:])

        user_data = {
            "id": user_id,
            "username": username,
            "name": "N/A",
            "is_admin": "false",
            "lecture_notification": "true",
            "lab_notification": "true"
        }
        add_user_to_whitelist(user_data)  # Add user to whitelist
        keyus = InlineKeyboardMarkup()
        keyus.add(InlineKeyboardButton(text='–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é', callback_data='back_to_start'))
        bot.send_message(user_id, "–í–∞–º –Ω–∞–¥–∞–Ω–æ –¥–æ—Å—Ç—É–ø –¥–æ –±–æ—Ç—É! –ü—Ä–∏—î–º–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è!",reply_markup=keyus)

        # Notify admin that the user has been approved
        bot.answer_callback_query(call.id, "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ–¥–∞–Ω–æ –¥–æ —Å–ø–∏—Å–∫—É.")
        disabled_keyboard = types.InlineKeyboardMarkup()
        disabled_button = types.InlineKeyboardButton(
            text="–ó–∞–ø–∏—Ç —Å—Ö–≤–∞–ª–µ–Ω–æ ‚úÖ",
            callback_data="disabled"
        )
        disabled_keyboard.add(disabled_button)

        bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      reply_markup=disabled_keyboard)

        # Notify the user that they have been approved


    @bot.callback_query_handler(func=lambda call: call.data.startswith('ignore_'))
    def ignore_user(call):
        parts = call.data.split('_')
        user_id, username = parts[1], "_".join(parts[2:])

        # Notify admin that the user has been ignored
        bot.answer_callback_query(call.id, "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—Ä–æ—ñ–≥–Ω–æ—Ä–æ–≤–∞–Ω–æ.")
        disabled_keyboard = types.InlineKeyboardMarkup()
        disabled_button = types.InlineKeyboardButton(
            text="–ó–∞–ø–∏—Ç –ø—Ä–æ—ñ–≥–Ω–æ—Ä–æ–≤–∞–Ω–æ ‚ùå",
            callback_data="disabled"
        )
        disabled_keyboard.add(disabled_button)

        bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      reply_markup=disabled_keyboard)

        # Notify the user that they have been ignored
        bot.send_message(user_id, "–í–∏–±–∞—á—Ç–µ, –≤–∞—à –∑–∞–ø–∏—Ç –Ω–∞ –¥–æ—Å—Ç—É–ø –¥–æ –±–æ—Ç–∞ –±—É–≤ –ø—Ä–æ—ñ–≥–Ω–æ—Ä–æ–≤–∞–Ω–∏–π.")

    @bot.callback_query_handler(func=lambda call: call.data.startswith("blacklist_"))
    def blacklist_user_callback(call):
        user_id = call.data.split("_")[1]
        username = call.data.split("_")[2]

        # Add user to the blacklist (your logic here)
        # After blacklisting, we need to disable the buttons
        disabled_keyboard = types.InlineKeyboardMarkup()
        disabled_button = types.InlineKeyboardButton(
            text="–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ–¥–∞–Ω–æ –¥–æ —á–æ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É ‚ùå",
            callback_data="disabled"
        )
        disabled_keyboard.add(disabled_button)

        bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      reply_markup=disabled_keyboard)
        bot.answer_callback_query(call.id, "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ–¥–∞–Ω–æ –¥–æ —á–æ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É.")


    @bot.callback_query_handler(func=lambda call: call.data == "blacklist")
    def show_blacklist(call):
        blacklist = get_blacklist()
        user_id = call.from_user.id
        chat_id = call.message.chat.id
        message_id = call.message.message_id
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton(text=BACK_BUTTON_TEXT,callback_data='back_to_start'))
        if not blacklist:
            bot.edit_message_text(chat_id= chat_id, message_id=message_id,
                                  text="—Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç–∏–π:", reply_markup=keyboard)
            return


        for user_id, username in blacklist:
            button = types.InlineKeyboardButton(
                text=f"{username} (ID: {user_id})", callback_data=f"whitelist_{user_id}_{username}"
            )
            keyboard.add(button)

        bot.edit_message_text(chat_id, message_id=message_id,
                                  text="–ü—Ä–æ—ñ–≥–Ω–æ—Ä–æ–≤–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ:", reply_markup=keyboard)

    # --- –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —á–æ—Ä–Ω–æ–≥–æ –≤ –±—ñ–ª–∏–π —Å–ø–∏—Å–æ–∫ ---
    @bot.callback_query_handler(func=lambda call: call.data.startswith('whitelist_'))
    def whitelist_user(call):
        parts = call.data.split('_')
        user_id, username = parts[1], "_".join(parts[2:])

        user_data = {
            "id": user_id,
            "username": username,
            "name": "N/A",
            "is_admin": "false",
            "lecture_notification": "true",
            "lab_notification":"true"
        }
        add_user_to_whitelist(user_data)
        remove_from_blacklist(user_id)

        bot.answer_callback_query(call.id, "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ–¥–∞–Ω–æ –¥–æ —Å–ø–∏—Å–∫—É.")
        bot.send_message(call.message.chat.id, f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {username} (ID: {user_id}) –¥–æ–¥–∞–Ω–∏–π —É —Å–ø–∏—Å–æ–∫.")
        bot.send_message(user_id, "–í–∞—Å –¥–æ–¥–∞–Ω–æ –¥–æ —Å–ø–∏—Å–∫—É! –¢–µ–ø–µ—Ä —É –≤–∞—Å —î –¥–æ—Å—Ç—É–ø –¥–æ –±–æ—Ç—É! –ü—Ä–∏—î–º–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è!")

    @bot.callback_query_handler(func=lambda call: call.data == "view_schedule")
    def view_schedule(call):
        chat_id = call.message.chat.id
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton(text="1 —Ç–∏–∂–¥–µ–Ω—å", callback_data="view_numerator"))
        keyboard.add(InlineKeyboardButton(text="2 —Ç–∏–∂–¥–µ–Ω—å", callback_data="view_denominator"))
        keyboard.add((InlineKeyboardButton(text="–Ø —Ö–∑ –º–µ–Ω—ñ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ —Ç—Ä–µ–±–∞",callback_data="view_today")))
        keyboard.add(InlineKeyboardButton(text=BACK_BUTTON_TEXT, callback_data="back_to_start"))
        bot.edit_message_text("–û–±–µ—Ä—ñ—Ç—å —Ç–∏–∂–¥–µ–Ω—å:", chat_id, call.message.message_id,
                              reply_markup=keyboard)

    @bot.callback_query_handler(func=lambda call: call.data == "view_today")
    def today(call):
        chat_id = call.message.chat.id
        try:
            api_data = get_current_time_data()
            current_day = DAYS_MAP[api_data['currentDay'] - 1]  # Convert 1-7 to 0-6 for indexing
            current_week = 'numerator' if api_data['currentWeek'] % 2 != 0 else 'denominator'
            schedule_data = load_schedule_from_csv()
            today_schedule = []
            for entry in schedule_data:
                if entry['day'] == current_day and entry['week'] == current_week:
                    today_schedule.append(entry)
            today_schedule.sort(key=lambda x: datetime.strptime(x['time'], '%H:%M'))
            if today_schedule:
                message_lines = [f"–†–æ–∑–∫–ª–∞–¥ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ ({current_day}):"]
                for entry in today_schedule:
                    message_lines.append(f"‚è∞ {entry['time']} ‚Äì {entry['subject']}")
                message = "\n".join(message_lines)
            else:
                message = f"–ù–∞ —Å—å–æ–≥–æ–¥–Ω—ñ ({current_day}) –ø–∞—Ä –Ω–µ–º–∞—î."
            bot.edit_message_text(chat_id=chat_id, text=message, message_id=call.message.message_id)
        except Exception as e:
            bot.send_message(chat_id, "–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ä–æ–∑–∫–ª–∞–¥—É.")

    @bot.callback_query_handler(func=lambda call: call.data.startswith("view_"))
    def select_week(call):
        chat_id = call.message.chat.id
        week_type = call.data.split("_")[1]
        keyboard = InlineKeyboardMarkup()
        days = ["–ü–Ω", "–í–≤", "–°—Ä", "–ß—Ç", "–ü—Ç"]
        for day in days:
            keyboard.add(InlineKeyboardButton(text=day, callback_data=f"schedule_{week_type}_{day}"))
        keyboard.add(InlineKeyboardButton(text=BACK_BUTTON_TEXT, callback_data="back_to_start"))
        bot.edit_message_text("–û–±–µ—Ä—ñ—Ç—å –¥–µ–Ω—å –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Ä–æ–∑–∫–ª–∞–¥—É:", chat_id, call.message.message_id,
                              reply_markup=keyboard)

    @bot.callback_query_handler(func=lambda call: call.data.startswith("schedule_"))
    def show_schedule_for_day(call):
        chat_id = call.message.chat.id
        _, week_type, selected_day = call.data.split("_")
        schedule_data = load_schedule_from_csv()

        schedule_text = f"–†–æ–∑–∫–ª–∞–¥ –Ω–∞ {selected_day} ({'1 —Ç–∏–∂–¥–µ–Ω—å' if week_type == 'numerator' else '2 —Ç–∏–∂–¥–µ–Ω—å'}):\n"
        for entry in schedule_data:
            if entry['day'] == selected_day and entry['week'] == week_type:
                schedule_text += f"{entry['time']} - {entry['subject']}\n"

        if not schedule_text.strip():
            schedule_text = f"–†–æ–∑–∫–ª–∞–¥ –Ω–∞ {selected_day} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."

        bot.send_message(chat_id, schedule_text)

    @bot.callback_query_handler(func=lambda call: call.data.startswith("set_day_") or call.data.startswith("set_time_"))
    def ask_day_to_schedule(message):
        keyboard = types.InlineKeyboardMarkup()
        days = ["–ü–æ–Ω–µ–¥—ñ–ª–æ–∫", "–í—ñ–≤—Ç–æ—Ä–æ–∫", "–°–µ—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä", "–ü'—è—Ç–Ω–∏—Ü—è", "–°—É–±–æ—Ç–∞", "–ù–µ–¥—ñ–ª—è"]

        for day in days:
            keyboard.add(types.InlineKeyboardButton(text=day, callback_data=f"set_day_{day}"))

        bot.send_message(message.chat.id, "–í–∏–±–µ—Ä—ñ—Ç—å –¥–µ–Ω—å —Ç–∏–∂–Ω—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏:", reply_markup=keyboard)

    def ask_time_to_schedule(call):
        keyboard = types.InlineKeyboardMarkup()

        times = ["09:00", "10:00", "12:00", "15:00", "18:00"]  # –ü—Ä–∏–∫–ª–∞–¥–∏ —á–∞—Å—É
        for time_option in times:
            keyboard.add(types.InlineKeyboardButton(text=time_option, callback_data=f"set_time_{time_option}"))

        bot.send_message(call.message.chat.id, "–í–∏–±–µ—Ä—ñ—Ç—å —á–∞—Å –¥–ª—è –∑–∞–ø—É—Å–∫—É –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏:", reply_markup=keyboard)

    def handle_schedule_settings(call):
        user_id = str(call.from_user.id)

        if is_user_admin(user_id):
            chat_id = call.message.chat.id


            if call.data.startswith("set_day_"):
                day = call.data.replace("set_day_", "")
                admin_schedule[user_id] = {"day": day}  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∏–±—ñ—Ä –¥–Ω—è
                bot.answer_callback_query(call.id, f"–í–∏ –≤–∏–±—Ä–∞–ª–∏ –¥–µ–Ω—å: {day}")
                ask_time_to_schedule(call)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –≤–∏–±–æ—Ä—É —á–∞—Å—É


            elif call.data.startswith("set_time_"):
                time_selected = call.data.replace("set_time_", "")
                if user_id in admin_schedule and "day" in admin_schedule[user_id]:
                    day = admin_schedule[user_id]["day"]

                    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–æ–∑–∫–ª–∞–¥ —É CSV
                    save_schedule_to_csv(chat_id, day, time_selected)
                    bot.answer_callback_query(call.id, f"–ì—Ä–∞—Ñ—ñ–∫ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {day} –æ {time_selected}")

                    # –û–Ω–æ–≤–ª—é—î–º–æ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫


        else:
            bot.answer_callback_query(call.id, "–í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤ –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫—É.")

    @bot.message_handler(commands=["set_schedule"])
    def set_schedule(message):
        user_id = str(message.from_user.id)

        if is_user_admin(user_id):
            ask_day_to_schedule(message)
        else:
            bot.send_message(message.chat.id, "–í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤ –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è.")

    @bot.callback_query_handler(func=lambda call: call.data == "settings")
    def settings_menu(call):
        user_id = call.from_user.id
        lecture_status, lab_status = get_user_notifications(user_id)

        lecture_icon = '‚úÖ' if lecture_status == 'True' else '‚ùå'
        lab_icon = '‚úÖ' if lab_status == 'True' else '‚ùå'

        keyboard = types.InlineKeyboardMarkup()

        lecture_button = types.InlineKeyboardButton(
            text=f'–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –ø–∞—Ä–∏ {lecture_icon}',
            callback_data='toggle_lecture_notification'
        )
        lab_button = types.InlineKeyboardButton(
            text=f'–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ñ/–ø—Ä–∞–∫—Ç–∏—á–Ω—ñ {lab_icon}',
            callback_data='toggle_lab_notification'
        )
        keyboard.add(types.InlineKeyboardButton(text='–ö–∞–Ω–∞–ª –±–æ—Ç–∞!', url='https://t.me/campushelper'))
        keyboard.add(lecture_button)
        keyboard.add(lab_button)
        keyboard.add(types.InlineKeyboardButton(text=BACK_BUTTON_TEXT, callback_data="back_to_start"))

        chat_id = call.message.chat.id
        message_id = call.message.message_id

        try:
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text="–ù–∞–ª–∞—à—Ç—É–π—Ç–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è!",
                reply_markup=keyboard
            )
        except Exception as e:
            if "message is not modified" in str(e):
                # –Ø–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –∑–º—ñ–Ω–∏–ª–æ—Å—è, –ø—Ä–æ—Å—Ç–æ —ñ–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫—É
                pass
            else:
                # –Ø–∫—â–æ –≤–∏–Ω–∏–∫–ª–∞ —ñ–Ω—à–∞ –ø–æ–º–∏–ª–∫–∞, –º–æ–∂–Ω–∞ —ó—ó –æ–±—Ä–æ–±–∏—Ç–∏ –∞–±–æ –∑–∞–ª–æ–≥—É–≤–∞—Ç–∏
                print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")

    @bot.callback_query_handler(
        func=lambda call: call.data in ['toggle_lecture_notification', 'toggle_lab_notification'])
    def callback_toggle_notification(call):
        user_id = call.from_user.id

        if call.data == 'toggle_lecture_notification':
            toggle_notification(user_id, 'lecture')
            bot.answer_callback_query(call.id, "–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –ø–∞—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–æ!")
        elif call.data == 'toggle_lab_notification':
            toggle_notification(user_id, 'lab')
            bot.answer_callback_query(call.id, "–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ñ/–ø—Ä–∞–∫—Ç–∏—á–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ!")

        # –û–Ω–æ–≤–ª—é—î–º–æ –º–µ–Ω—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
        settings_menu(call)

    @bot.callback_query_handler(func=lambda call: call.data == "vidrh")
    def vidrh_menu(call):
        user_id = call.from_user.id
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text="–§–æ—Ä–º–∞ –¥–ª—è –≤—ñ–¥—Ä–∞—Ö—É–≤–∞–Ω–Ω—è",
                                                url='https://docs.google.com/document/d/1O_UUbVFJrlt1u-TTTh65kIdSgRPAYRlL/edit?usp=sharing&ouid=102193641661235924869&rtpof=true&sd=true'))
        keyboard.add(types.InlineKeyboardButton(text="–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ–æ—Ä–º—É", url="https://t.me/slovyan_k"))
        keyboard.add(types.InlineKeyboardButton(text=BACK_BUTTON_TEXT, callback_data="back_to_start"))

        chat_id = call.message.chat.id
        message_id = call.message.message_id

        bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text='–¢—É—Ç —Ç–∏ –∑–º–æ–∂–µ—à –≤—ñ–¥—Ä–∞—Ö—É–≤–∞—Ç–∏—Å—è –∑ –Ω–∞—à–æ–≥–æ —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç—É!',
            reply_markup=keyboard
        )

    @bot.callback_query_handler(func=lambda call: call.data == "broadcast")
    def broadcasting(call):
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton(text=BACK_BUTTON_TEXT, callback_data="back_to_start"))
        msg = bot.send_message(call.from_user.id, "–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç!",reply_markup=keyboard)
        def broadcast_handler(message):
            broadcast_message(bot, message.chat.id, message.text)
        bot.register_next_step_handler(msg, lambda message: broadcast_handler(message))

    @bot.callback_query_handler(func=lambda call: call.data == ("addinvite"))
    def invite(call):
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton(text=BACK_BUTTON_TEXT, callback_data="back_to_start"))
        chat_id = call.message.chat.id
        message_id = call.message.message_id
        bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text= "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ñ–∞–π–ª–∞ ",reply_markup=keyboard)
        bot.register_next_step_handler(call.message, text_handler)
    @bot.callback_query_handler(func=lambda call: call.data == "attendance")
    def attendance_menu(call):
        keyboard = types.InlineKeyboardMarkup()
        user_id = str(call.from_user.id)
        if is_user_admin(user_id):

            start_attendance_button = types.InlineKeyboardButton(text="–í—ñ–¥–º—ñ—Ç–∏—Ç–∏—Å—è", callback_data="start_attendance")
            start_check_attendance_button = types.InlineKeyboardButton(text="–ó—ñ–±—Ä–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –ø—Ä–∏—Å—É—Ç–Ω—ñ—Ö/–≤—ñ–¥—Å—É—Ç–Ω—ñ—Öüìú", callback_data="start_check_attendance")
            send_attendance_button = types.InlineKeyboardButton(text="–û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –ø—Ä–∏—Å—É—Ç–Ω—ñ—Ö/–≤—ñ–¥—Å—É—Ç–Ω—ñ—Öüìú", callback_data="send_attendance_to_admin")
            back_button = InlineKeyboardButton(text=BACK_BUTTON_TEXT, callback_data="back_to_start")
            keyboard.add(start_check_attendance_button)
            keyboard.add(start_attendance_button)
            keyboard.add(send_attendance_button)
            keyboard.add(back_button)
        else:
            start_attendance_button = types.InlineKeyboardButton(text="–í—ñ–¥–º—ñ—Ç–∏—Ç–∏—Å—è", callback_data="start_attendance")
            back_button = InlineKeyboardButton(text=BACK_BUTTON_TEXT, callback_data="back_to_start")
            keyboard.add(start_attendance_button)
            keyboard.add(back_button)
        bot.edit_message_text("–í—ñ–¥–º—ñ—Ç–∏—Ç–∏—Å—å –Ω–∞ –ø–∞—Ä—ñ!üòµ‚Äçüí´", call.message.chat.id, call.message.message_id, reply_markup=keyboard)

    @bot.callback_query_handler(func=lambda call: call.data == "start_attendance")
    def attendance(call):
        keyboard = types.InlineKeyboardMarkup()
        present_button = types.InlineKeyboardButton(text="–ü—Ä–∏—Å—É—Ç–Ω—ñ–π‚úÖ", callback_data="present")
        absent_button = types.InlineKeyboardButton(text="–í—ñ–¥—Å—É—Ç–Ω—ñ–π‚ùå", callback_data="absent")
        report_button = types.InlineKeyboardButton(text="–ü—Ä–∏—á–∏–Ω–∞ –≤—ñ–¥—Å—É—Ç–Ω–æ—Å—Ç—ñüìú", callback_data="report")
        back_button = InlineKeyboardButton(text=BACK_BUTTON_TEXT, callback_data="back_to_start")
        keyboard.add(present_button)
        keyboard.add(absent_button)
        keyboard.add(report_button)
        keyboard.add(back_button)
        bot.edit_message_text("–í–∫–∞–∂—ñ—Ç—å –≤–∞—à—É –ø—Ä–∏—Å—É—Ç–Ω—ñ—Ç—å —á–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å!ü™¶", call.message.chat.id, call.message.message_id, reply_markup=keyboard)

    @bot.callback_query_handler(func=lambda call: call.data == "present")
    def present(call):
        user_id = str(call.from_user.id)
        chat_id = call.message.chat.id
        if user_id in attendance_data:
            attendance_data[user_id]['attendance'] = "–ü—Ä–∏—Å—É—Ç–Ω—ñ–π‚úÖ"
            bot.send_message(chat_id,
                             "–í–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —Å–≤–æ—é –ø—Ä–∏—Å—É—Ç–Ω—ñ—Å—Ç—å! –î—è–∫—É—é!")
        else:
            bot.send_message(chat_id, "–ó–∞–ø–∏—Ç –Ω–∞ –≤—ñ–¥–º—ñ—Ç–∫—É –Ω–µ –±—É–ª–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–±–æ –≤–∏ –Ω–µ –≤ –±—ñ–ª–æ–º—É —Å–ø–∏—Å–∫—É.")

    @bot.callback_query_handler(func=lambda call: call.data == "absent")
    def absent(call):
        user_id = str(call.from_user.id)
        chat_id = call.message.chat.id
        if user_id in attendance_data:
            attendance_data[user_id]['attendance'] = "–í—ñ–¥—Å—É—Ç–Ω—ñ–π‚ùå"
            bot.send_message(chat_id, "–í–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —Å–≤–æ—é –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å! –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –ø—Ä–∏—á–∏–Ω—É –≤–∞—à–æ—ó –≤—ñ–¥—Å—É—Ç–Ω–æ—Å—Ç—ñ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –∫–æ–º–∞–Ω–¥—É /report.")
        else:
            bot.send_message(chat_id, "–ó–∞–ø–∏—Ç –Ω–∞ –≤—ñ–¥–º—ñ—Ç–∫—É –Ω–µ –±—É–ª–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–±–æ –≤–∏ –Ω–µ –≤ –±—ñ–ª–æ–º—É —Å–ø–∏—Å–∫—É.")

    @bot.callback_query_handler(func=lambda call: call.data == "report")
    def report(call):
        user_id = str(call.from_user.id)

        if user_id in attendance_data:
            bot.send_message(user_id, "–í–≤–µ–¥—ñ—Ç—å –ø—Ä–∏—á–∏–Ω—É –≤—ñ–¥—Å—É—Ç–Ω–æ—Å—Ç—ñ!")
            bot.register_next_step_handler(call.message, save_report)
        else:
            bot.send_message(call.id, "–ü–æ—á–µ–∫–∞–π—Ç–µ –∞–¥–º—ñ–Ω–∏ —Å–ø–ª—è—Ç—å —Ç–∞ –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –ø—Ä–∏—Å—Ç—É–Ω–æ—Å—Ç—ñ")

    @bot.callback_query_handler(func=lambda call: call.data == "start_check_attendance")
    def start_check_attendance(call):
        user_id = str(call.from_user.id)
        chat_id = call.message.chat.id
        global attendance_data
        if is_user_admin(user_id):
            attendance_data = start_attendance_check(bot)
            bot.answer_callback_query(call.id, "–ó–∞–ø—É—Å–∫–∞—é...")
        else:
            bot.send_message(chat_id, "–í–∏ –ª–æ—Ö –±–µ–∑ –∞–¥–º—ñ–Ω –ø—Ä–∞–≤")
    @bot.callback_query_handler(func=lambda call: call.data == "send_attendance_to_admin")
    def send_attendance_to_admin(call):
        if is_user_admin(call.from_user.id):
            im_save_attendance_to_csv(attendance_data)
            for admin_id in get_all_admins():
                try:
                    with open(ATTENDANCE_FILE, 'rb') as file:
                        bot.send_document(admin_id, file)
                except FileNotFoundError:
                    bot.send_message(admin_id, "–§–∞–π–ª –∑ –≤—ñ–¥–º—ñ—Ç–∫–∞–º–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
                except Exception as e:
                    bot.send_message(admin_id, f"–ü–æ–º–∏–ª–∫–∞: {e}")
            bot.answer_callback_query(call.id, "–í—ñ–¥–º—ñ—Ç–∫–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —ñ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å—ñ–º –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        else:
            bot.answer_callback_query(call.id, "–¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ü—é –∫–æ–º–∞–Ω–¥—É!")

    @bot.callback_query_handler(func=lambda call: call.data == "back_to_attendance")
    def back_to_attendance(call):
        attendance_menu(call)

    @bot.callback_query_handler(func=lambda call: call.data =="attendance1")
    def attendance1(call):
        attendance(call)

    @bot.callback_query_handler(func=lambda call: call.data == "back_to_start")
    def back_to_start(call):
        user_id = call.from_user.id
        chat_id = call.message.chat.id
        message_id = call.message.message_id

        if not is_user_in_whitelist(user_id):
            request_access(user_id, call)
            return
        if user_id == is_user_blacklisted(user_id):
            bot.send_message(user_id, '–í–∏ –≤ —á–æ—Ä–Ω–æ–º—É —Å–ø–∏—Å–∫—É')
            return

        # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
        keyboard = types.InlineKeyboardMarkup(row_width=2)

        # –ö–Ω–æ–ø–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ –¥–ª—è –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        attendance_button = types.InlineKeyboardButton(text="–í—ñ–¥–º—ñ—Ç–∏—Ç–∏—Å—å –Ω–∞ –ø–∞—Ä—ñüìç", callback_data="attendance")
        invites_button = types.InlineKeyboardButton(text="–ó–∞–ø–∏—Å–∏/–∫–æ–Ω—Å–ø–µ–∫—Ç‚ùó", callback_data="invites")
        schedule_button = types.InlineKeyboardButton(text="–†–æ–∑–∫–ª–∞–¥üìö", callback_data="view_schedule")
        form_button = types.InlineKeyboardButton(text="–í—ñ–¥—Ä–∞—Ö—É–≤–∞–Ω–Ω—èüóø", callback_data='vidrh')
        settings_button = types.InlineKeyboardButton(text='–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è‚öôÔ∏è', callback_data='settings')

        # –î–æ–¥–∞—î–º–æ –∑–∞–≥–∞–ª—å–Ω—ñ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        keyboard.add(attendance_button, invites_button)
        keyboard.add(schedule_button, form_button)

        if is_user_admin(str(user_id)):
            broadcast_button = types.InlineKeyboardButton(text='–†–æ–∑—Å–∏–ª–∫–∞üì™', callback_data="broadcast")
            add_invite_button = types.InlineKeyboardButton(text="–î–æ–¥–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è", callback_data="addinvite")
            set_schedule_button = types.InlineKeyboardButton(text='–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ä–æ–∑—Å–∏–ª–∫–∏', callback_data="set_schedule")
            blacklist_button = types.InlineKeyboardButton(text="–ß–æ—Ä–Ω–∏–π —Å–ø–∏—Å–æ–∫üïØ", callback_data="blacklist")

            # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            keyboard.add(set_schedule_button, add_invite_button)
            keyboard.add(broadcast_button, settings_button)
            keyboard.add(blacklist_button)
        else:
            # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä, –¥–æ–¥–∞—î–º–æ –ª–∏—à–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
            keyboard.add(settings_button)

        bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text='–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é',
            reply_markup=keyboard
        )

    @bot.callback_query_handler(func=lambda call: call.data == "invites")
    def show_folder_selection(call):
        folders = get_available_folders()
        chat_id = call.message.chat.id
        message_id = call.message.message_id
        keyboard = InlineKeyboardMarkup()

        if not folders:
            keyboard.add(InlineKeyboardButton(BACK_BUTTON_TEXT, callback_data="back_to_start"))
            bot.edit_message_text(chat_id=chat_id,message_id=message_id,text=  "–ù–∞ –∂–∞–ª—å, –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –ø–∞–ø–æ–∫ –∑ —ñ–Ω–≤–∞–π—Ç–∞–º–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.",reply_markup=keyboard)
            return


        for folder in folders:
            keyboard.add(InlineKeyboardButton(folder, callback_data=f"folder:{folder}"))
        keyboard.add(InlineKeyboardButton(BACK_BUTTON_TEXT, callback_data="back_to_start"))
        bot.edit_message_text(chat_id=chat_id,message_id=message_id,text= "–û–±–µ—Ä—ñ—Ç—å –ø—Ä–µ–¥–º–µ—Çüìö", reply_markup=keyboard)

    @bot.callback_query_handler(func=lambda call: call.data.startswith("folder:"))
    def folder_invites_handler(call):
        folder = call.data.split(":")[1]
        invite_keyboard = create_invite_keyboard_by_folder(folder)

        if invite_keyboard:
            invite_keyboard.add(InlineKeyboardButton(BACK_BUTTON_TEXT, callback_data="invites"))
            bot.edit_message_text(f"–ö–æ—Ä–∏—Å–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –≤ —á–∞—Ç—ñ '{folder}':", call.message.chat.id, call.message.message_id, reply_markup=invite_keyboard)
        else:
            bot.answer_callback_query(call.id, f"–£ –ø–∞–ø—Ü—ñ '{folder}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —ñ–Ω–≤–∞–π—Ç—ñ–≤.")
            show_folder_selection(call.message.chat.id)

    def create_invite_keyboard_by_folder(folder):
        keyboard = InlineKeyboardMarkup()
        invites = get_invites_by_folder(folder)
        for invite in invites:
            keyboard.add(InlineKeyboardButton(invite['text'], url=invite['url']))
        return keyboard



    @bot.message_handler(content_types=['text'])
    def get_text_messages(message):
        user_id = message.from_user.id
        if not is_user_in_whitelist(user_id):
            keyboard = types.InlineKeyboardMarkup()
            approve_button = types.InlineKeyboardButton(text="–°—Ö–≤–∞–ª–∏—Ç–∏", callback_data=f"approve_{user_id}_{message.from_user.username}")
            keyboard.add(approve_button)
            for admin_id in get_all_admins():
                bot.send_message(admin_id, f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.username} (ID: {user_id}) –∑–∞–ø–∏—Ç—É—î –¥–æ—Å—Ç—É–ø.", reply_markup=keyboard)
            bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É! –û—á—ñ–∫—É–π—Ç–µ —Å—Ö–≤–∞–ª–µ–Ω–Ω—è!")
            return

        if message.text == "/start":
            start_menu(message)
        elif message.text == "/help":
            bot.send_message(user_id, "–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n/start - –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –¥–∞–ª—ñ –∫–Ω–æ–ø–æ—á–∫–∏\n")
        elif message.text == '/reg_new_id' and is_user_admin(user_id):
            bot.send_message(user_id, "–í–≤–µ–¥—ñ—Ç—å ID –∞–±–æ /cancel –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è:")
            is_adding_id[user_id] = True
            bot.register_next_step_handler(message, add_user_to_whitelist)
        elif message.text == "/cancel" and user_id in is_adding_id and is_adding_id[user_id]:
            bot.send_message(user_id, "–û–ø–µ—Ä–∞—Ü—ñ—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è ID —Å–∫–∞—Å–æ–≤–∞–Ω–∞!")
            is_adding_id[user_id] = False
        elif message.text.startswith("/broadcast") and is_user_admin(user_id):
            broadcast_text = message.text[len("/broadcast "):].strip()
            if broadcast_text:
                bot.send_message(user_id, "–ü–æ—á–∏–Ω–∞—é —Ä–æ–∑—Å–∏–ª–∫—É...")
                broadcast_message(bot, message, broadcast_text)
            else:
                bot.send_message(user_id, "–¢–µ–∫—Å—Ç –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏ –Ω–µ –≤–∫–∞–∑–∞–Ω–∏–π.")
        elif message.text == "/add_invite" and is_user_admin(user_id):
            bot.send_message(user_id, "–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –∞–±–æ /cancel –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è:")
            bot.register_next_step_handler(message, text_handler)
        else:
            bot.send_message(user_id, "–Ø –≤–∞—Å –Ω–µ —Ä–æ–∑—É–º—ñ—é! –ù–∞–ø–∏—à—ñ—Ç—å /help –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥.")

    @bot.callback_query_handler(func=lambda call: call.data.startswith('approve_'))
    def approve_user_callback(call):
        approve_user(bot, call)
        user_id = call.data.split('_')[1]
        remove_pending_requests(user_id)
        bot.answer_callback_query(call.id, "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Å—Ö–≤–∞–ª–µ–Ω–æ.")


    def remove_pending_requests(user_id):
        if user_id in pending_requests:
            for admin_id, message_id in pending_requests[user_id]:
                try:
                    bot.delete_message(admin_id, message_id)
                except Exception as e:
                    print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
            del pending_requests[user_id]




    def save_report(message):
        user_id = str(message.from_user.id)
        report = message.text

        if user_id in attendance_data:
            attendance_data[user_id]['report'] = report
            bot.send_message(user_id, "–í–∞—à –∑–≤—ñ—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ! –î—è–∫—É—î–º–æ –∑–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é!")
            for admin_id in get_all_admins():
                bot.send_message(admin_id,
                                 f"–ù–æ–≤–∏–π –∑–≤—ñ—Ç –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} {message.from_user.username}:\n–î–∞—Ç–∞: {attendance_data[user_id]['date']}\n–ü—Ä–∏—á–∏–Ω–∞: {report}")
        else:
            bot.send_message(user_id, "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –∑–≤—ñ—Ç! –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ!")

    def text_handler(message):
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton(text=BACK_BUTTON_TEXT, callback_data="back_to_start"))
        INVITE_COLUMNS['text'] = message.text
        bot.send_message(message.from_user.id, "–í–∫–∞–∂—ñ—Ç—å URL –¥–ª—è –∫–Ω–æ–ø–∫–∏ ",reply_markup=keyboard)
        bot.register_next_step_handler(message, url_handler)

    def url_handler(message):
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton(text=BACK_BUTTON_TEXT, callback_data="back_to_start"))
        INVITE_COLUMNS['url'] = message.text
        bot.send_message(message.from_user.id, "–í–∫–∞–∂—ñ—Ç—å –Ω–∞–∑–≤—É –∫–Ω–æ–ø–∫–∏ (–∞–±–æ –∑–∞–ª–∏—à—Ç–µ –ø–æ—Ä–æ–∂–Ω—ñ–º –¥–ª—è 'default'):",reply_markup=keyboard)
        bot.register_next_step_handler(message, folder_handler)

    def folder_handler(message):
        folder = message.text.strip() if message.text.strip() else 'default'
        add_invite_button_for_admin(bot, message, INVITE_COLUMNS['text'], INVITE_COLUMNS['url'], folder)
        bot.send_message(message.from_user.id, f"–ö–Ω–æ–ø–∫–∞ —ñ–∑ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è–º —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–∞ –≤ –ø–∞–ø–∫—É '{folder}'!")
